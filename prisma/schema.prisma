// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Waitlist {
  id             Int      @id @default(autoincrement())
  name           String?
  fName          String?
  lName          String?
  email          String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  subdomain      String   @unique
  earlyBird      Boolean  @default(true)
  earlyBirdCode  String?  @unique
  reservationNo  Int?     @unique
  codeUsed       String
  numberReferred Int      @default(0)
  referralCode   String   @unique
  testKey        String   @default("key")

  // userId    Int
  // User User @relation(fields: [userId], references: [id])

  // @@unique([userId])
}

// model User {
//   id            Int       @id @default(autoincrement())
//   name          String?
//   email         String?   @unique
//   fName         String?
//   lName         String?
//   emailVerified DateTime?
//   image         String?
//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt
//   waitlist      Waitlist?
//   accounts      Account[]
//   sessions      Session[]
//   role          Role      @default(OWNER)
// }

// model Account {
//   id                Int     @id @default(autoincrement())
//   userId            Int
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String? @db.Text
//   access_token      String? @db.Text
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String? @db.Text
//   session_state     String?
//   user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
//   @@index([userId])
// }

// model Session {
//   id           Int      @id @default(autoincrement())
//   sessionToken String   @unique
//   userId       Int
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@index([userId])
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

// enum Role {
//   ADMIN
//   OWNER
//   MEMBER
//   CLIENT
// }
