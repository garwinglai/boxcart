// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum CodeType {
  FREESELLERACCESS
  EARLYACCESS
  AMBASSADOR
  SELLERPROMO
}

enum Role {
  // BoxCart Admin
  BOXADMIN
  // BoxCart Staff
  BOXSTAFF
  // BoxCart Partner
  PARTNER
  // Business owners - boxcart users
  OWNER
  // Businesses' staff
  STAFF
  // Shopper
  SHOPPER
}

model Waitlist {
  id         Int      @id @default(autoincrement())
  name       String?
  fName      String?
  lName      String?
  email      String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  subdomain  String   @unique
  fullDomain String   @unique
  accessCode String   @unique
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int?     @unique

  @@index([userId])
}

model User {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  name            String
  firstName       String
  lastName        String
  email           String          @unique
  isEmailVerified Boolean         @default(false)
  password        String
  loginProvider   String          @default("credentials")
  referredFrom    String?
  accounts        Account[]
  Waitlist        Waitlist?
  waitlistId      Int?
  shopperAccount  ShopperAccount?
}

model ShopperAccount {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  role            Role            @default(SHOPPER)
  name            String
  firstName       String
  lastName        String
  email           String          @unique
  isEmailVerified Boolean         @default(false)
  profileImage    String?         @db.Text
  referredFrom    String?
  credit          Int             @default(0) //in penny 
  totalSaved      Int             @default(0) //in penny
  likes           Like[]
  reviews         Review[]
  wishlist        Wishlist[]
  subscribes      Subscriber[]
  orders          CustomerOrder[]
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int             @unique
  Customer        Customer?
  usedCodes       UsedCode[]

  @@index([userId])
}

model Like {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  product          Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId        Int?
  digitalProduct   DigitalProduct? @relation(fields: [digitalProductId], references: [id], onDelete: Cascade)
  digitalProductId Int?
  shopperAccount   ShopperAccount  @relation(fields: [shopperAccountId], references: [id], onDelete: Cascade)
  shopperAccountId Int

  @@index([shopperAccountId])
  @@index([productId])
  @@index([digitalProductId])
}

model Wishlist {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  shopperAccount   ShopperAccount  @relation(fields: [shopperAccountId], references: [id], onDelete: Cascade)
  shopperAccountId Int
  product          Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId        Int?
  digitalProduct   DigitalProduct? @relation(fields: [digitalProductId], references: [id], onDelete: Cascade)
  digitalProductId Int?

  @@index([shopperAccountId])
  @@index([productId])
  @@index([digitalProductId])
}

// * Create another table for Seller Promo Codes

model AdminCode {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  code      String   @unique
  maxUse    Int      @default(1)
  useCount  Int      @default(0)
  creator   Role     @default(BOXADMIN)
  codeType  CodeType @default(FREESELLERACCESS)
}

model UsedCode {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  code             String
  creator          Role            @default(BOXADMIN)
  codeType         CodeType        @default(FREESELLERACCESS)
  account          Account?        @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId        Int?
  shopperAccount   ShopperAccount? @relation(fields: [shopperAccountId], references: [id], onDelete: Cascade)
  shopperAccountId Int?

  @@index([accountId])
  @@index([shopperAccountId])
}

model Account {
  id                               Int                  @id @default(autoincrement())
  createdAt                        DateTime             @default(now())
  updatedAt                        DateTime             @updatedAt
  version                          String               @default("1.0.0")
  referredFrom                     String?
  role                             Role                 @default(OWNER)
  isActive                         Boolean              @default(true) // free accounts that aren't free
  hasPremiumPlan                   Boolean              @default(false) // Default false until user pays for premium plan.
  isFreePeriodActive               Boolean              @default(true)
  isBetaUser                       Boolean              @default(true) // Default is true, meantime we are only accepting beta users.
  freePeriodEndDateStr             String?
  freePeriodEndDateEpoch           String? // 1 month free
  isFirstLogin                     Boolean              @default(true)
  isChecklistComplete              Boolean              @default(false) // Default false until checklist is complete.
  isNonMandatoryChecklistComplete  Boolean              @default(false) // Default false until checklist is complete.
  businessIdentities               String?
  email                            String               @unique
  isEmailVerified                  Boolean              @default(false)
  userName                         String
  firstName                        String
  lastName                         String
  businessName                     String
  subdomain                        String               @unique
  fullDomain                       String               @unique
  defaultProductTaxCode            String?
  defaultProductTaxCodeName        String?
  defaultProductTaxCodeDescription String?              @db.Text
  // logoImgStr             String?
  logoImageFileName                String?
  logoImage                        String?              @db.Text
  bannerImageFileName              String?
  bannerImage                      String?              @db.Text
  businessBio                      String?              @db.VarChar(255)
  socials                          Social[]
  subscriberCount                  Int                  @default(0)
  customers                        Customer[]
  subscribers                      Subscriber[]
  contacts                         Contact[]
  fulfillmentMethodInt             Int // 0: delivery, 1: pickup, 2: both
  fulfillmentMethods               Fulfillment[]
  address_1                        String
  address_2                        String?
  city                             String
  state                            String
  zip                              String
  fullAddress                      String
  lat                              Float?
  lng                              Float?
  geohash                          String?
  enableTips                       Boolean              @default(false)
  rating                           String               @default("5.00")
  reviewCount                      Int                  @default(1)
  tips                             Tips?
  user                             User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                           Int
  // hasPaymentMethod       Boolean              @default(false)
  requireDeposit                   Boolean              @default(false)
  businessTypes                    BusinessType[]
  acceptedPayments                 AcceptedPayment[]
  deposit                          Deposit?
  savedPaymentMethods              SavedPaymentMethod[]
  premiumPlan                      PremiumPlan?
  checklist                        Checklist?
  products                         Product[]
  digitalProducts                  DigitalProduct[]
  categories                       Category[]
  availability                     Availability?
  orders                           CustomerOrder[]
  revenue                          Revenue?
  payout                           Payout[]
  reviews                          Review[]
  payoutId                         Int?
  usedCodes                        UsedCode[]

  @@index([userId])
}

model Revenue {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  totalBalancePenny  Int?     @default(0)
  cardRevenuePenny   Int?     @default(0)
  cashRevenuePenny   Int?     @default(0)
  venmoRevenuePenny  Int?     @default(0)
  zelleRevenuePenny  Int?     @default(0)
  paypalRevenuePenny Int?     @default(0)
  account            Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId          Int      @unique

  @@index([accountId])
}

model Payout {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  stripeAccountId String
  stripePayoutId  String   @unique
  // stripeTransferId String
  balance         Int
  balanceDisplay  String
  // fees             Int
  // feesDisplay      String
  // net             Int
  // netDisplay      String
  account         Account  @relation(fields: [accountId], references: [id])
  accountId       Int

  @@index([accountId])
}

model Customer {
  id               Int             @id @default(autoincrement())
  name             String
  fName            String
  lName            String
  phoneNum         String?
  email            String          @unique
  stripeId         String?
  deliveryAddress  String?
  orders           CustomerOrder[]
  account          Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId        Int
  reviews          Review[]
  shopperAccount   ShopperAccount? @relation(fields: [shopperAccountId], references: [id])
  shopperAccountId Int?            @unique

  @@index([accountId])
  @@index([shopperAccountId])
}

// model Tax {
//   id               Int     @id @default(autoincrement())
//   taxRate          Float?
//   taxRateDisplay   String?
//   isTaxRateEnabled Boolean @default(false)
//   account          Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
//   accountId        Int     @unique

//   @@index([accountId])
// }

model CustomerOrder {
  id                          Int              @id @default(autoincrement())
  createdAt                   DateTime         @default(now())
  updatedAt                   DateTime         @updatedAt
  orderId                     String           @unique
  stripeOrderId               String?
  stripeErrorType             String? //validation_error, unknown_error, card_error
  stripeErrorMessage          String?
  deliveryAddress             String?
  pickupAddress               String?
  requireOrderTime            Boolean          @default(false)
  requireOrderDate            Boolean          @default(false)
  orderForDate                String? //epoch in milliseconds
  orderForDateDisplay         String?
  orderForTime                String? //epoch in milliseconds
  orderForTimeDisplay         String?
  fulfillmentType             Int // 0: delivery, 1: pickup, 2: download
  fulfillmentDisplay          String //"delivery", "pickup", "download"
  subtotalPenny               Int
  applicationFeePenny         Int?
  applicationFeeDisplay       String?
  subtotalDisplay             String
  taxRate                     Float?
  taxRateDisplay              String?
  orderStatus                 String           @default("pending") // "pending", "cmpleted", "canceled"
  paymentStatus               String // if cc: "processing", "paid", "failed", "refunded", "canceled", "unpaid", "error" 
  paymentMethod               String? // "card", "venmo", "cash" .. etc.
  paymentAccount              String? // account for venmo, paypal, zelle, etc.
  paymentInstructions         String?
  pickupNote                  String?
  // stripeFeePenny      Int? 
  // stripeFeeDisplay    String?
  cardFeePenny                Int?
  cardFeeDisplay              String?
  taxAndFeesPenny             Int?
  taxAndFeesDisplay           String?
  deliveryFeePenny            Int?
  deliveryFeeDisplay          String?
  tipPenny                    Int?
  tipDisplay                  String?
  totalPenny                  Int
  totalDisplay                String
  totalAfterStripeFeesPenny   Int?
  totalAfterStripeFeesDisplay String?
  totalAfterAllFeesPenny      Int?
  totalAfterAllFeesDisplay    String?
  totalItemsOrdered           Int
  account                     Account          @relation(fields: [accountId], references: [id])
  accountId                   Int
  customer                    Customer         @relation(fields: [customerId], references: [id])
  customerId                  Int
  products                    Product[]
  digitalProduct              DigitalProduct[]
  orderItems                  OrderItem[]
  shopperAccount              ShopperAccount?  @relation(fields: [shopperAccountId], references: [id])
  shopperAccountId            Int?

  @@index([accountId])
  @@index([customerId])
  @@index([shopperAccountId])
}

model OrderItem {
  id                    Int                   @id @default(autoincrement())
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  productName           String
  quantity              Int
  customNote            String?               @db.Text
  pricePenny            Int
  priceDisplay          String
  productImage          String?               @db.Text
  productType           Int                   @default(0) // 0: physical, 1: digital
  hasUnlimitedQuantity  Boolean               @default(true)
  setQuantityByProduct  Boolean               @default(true)
  orderOptionGroups     OrderOptionGroup[]
  orderExampleImages    OrderExampleImage[]
  orderQuestionsAnswers OrderQuestionAnswer[]
  Order                 CustomerOrder         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId               Int
  product               Product?              @relation(fields: [productId], references: [id])
  productId             Int?
  digitalProduct        DigitalProduct?       @relation(fields: [digitalProductId], references: [id])
  digitalProductId      Int?

  @@index([productId])
  @@index([orderId])
  @@index([digitalProductId])
}

model OrderQuestionAnswer {
  id          Int        @id @default(autoincrement())
  question    String     @db.TinyText
  answer      String     @db.Text
  orderItem   OrderItem? @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  orderItemId Int?

  @@index([orderItemId])
}

model OrderExampleImage {
  id            Int        @id @default(autoincrement())
  image         String     @db.Text
  fireStorageId String     @unique
  fileName      String
  orderItem     OrderItem? @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  orderItemId   Int?

  @@index([orderItemId])
}

model OrderOptionGroup {
  id              Int           @id @default(autoincrement())
  optionGroupName String?
  optionsDisplay  String
  orderOptions    OrderOption[]
  orderItem       OrderItem?    @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  orderItemId     Int?

  @@index([orderItemId])
}

model OrderOption {
  id                 Int               @id @default(autoincrement())
  optionName         String
  optionPrice        Int
  optionPriceDisplay String
  optionQuantity     Int?
  orderOptionGroup   OrderOptionGroup? @relation(fields: [orderOptionGroupId], references: [id], onDelete: Cascade)
  orderOptionGroupId Int?

  @@index([orderOptionGroupId])
}

model Contact {
  id        Int     @id @default(autoincrement())
  fName     String
  lName     String
  email     String  @unique
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId Int

  @@index([accountId])
}

model Subscriber {
  id               Int             @id @default(autoincrement())
  email            String          @unique
  accounts         Account[]
  shopperAccount   ShopperAccount? @relation(fields: [shopperAccountId], references: [id])
  shopperAccountId Int?

  @@index([shopperAccountId])
}

model AcceptedPayment {
  id                  Int      @id @default(autoincrement())
  isEnabled           Boolean  @default(false)
  details_submitted   Boolean?
  charged_enabled     Boolean?
  stripeAccountId     String?  @unique
  paymentMethod       String
  paymentAccount      String?
  paymentInstructions String?  @db.TinyText
  account             Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId           Int
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([paymentMethod, accountId], name: "payment_identifier")
  @@index([accountId])
}

model Deposit {
  id            Int     @id @default(autoincrement())
  feeTypeStr    String?
  feeTypeSymbol String?
  feeStr        String?
  feeIntPenny   Int?
  feeIntPercent Float?
  account       Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId     Int     @unique
}

model Availability {
  id                      Int                       @id @default(autoincrement())
  hasCustomAvailability   Boolean                   @default(false)
  datesAvailability       DatesAvailability[]
  datesRangedAvailability DatesRangedAvailability[]
  daysOfWeekAvailability  DaysOfWeekAvailability[]
  requireOrderInAdvance   Boolean                   @default(false)
  orderInAdvanceDisplay   String?                   @default("24 hours")
  orderInAdvanceValue     Int?                      @default(24)
  orderInAdvanceInSeconds Int?                      @default(86400)
  orderInAdvanceMetric    String?                   @default("hour")
  isTimeBlockEnabled      Boolean                   @default(false)
  timeBlock               String?                   @default("15 min")
  timeBlockSeconds        Int?                      @default(900)
  account                 Account                   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId               Int                       @unique
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt

  @@index([accountId])
}

model DatesAvailability {
  id                Int          @id @default(autoincrement())
  dateStrUnformat   String
  dateStr           String
  dateEpochStr      String
  startTimeStr      String
  startTimeEpochStr String
  endTimeStr        String
  endTimeEpochStr   String
  hoursDisplay      String?
  // repeatOption      String?
  // repeatOptionInt   Int? //0: no repeat 1: repeat weekly 
  isEnabled         Boolean      @default(true)
  availability      Availability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)
  availabilityId    Int
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@index([availabilityId])
}

model DatesRangedAvailability {
  id                   Int          @id @default(autoincrement())
  startDateStrUnformat String
  startDateStr         String
  startDateEpochStr    String
  endDateStrUnformat   String
  endDateStr           String
  endDateEpochStr      String
  startTimeStr         String
  endTimeStr           String
  hoursDisplay         String?
  isEnabled            Boolean      @default(true)
  availability         Availability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)
  availabilityId       Int
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt

  @@index([availabilityId])
}

model DaysOfWeekAvailability {
  id             Int          @id @default(autoincrement())
  daysDisplay    String
  days           String //string of days int "0, 1, 2, " 0 = sunday
  startTimeStr   String
  endTimeStr     String
  hoursDisplay   String?
  isEnabled      Boolean      @default(true)
  availability   Availability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)
  availabilityId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([availabilityId])
}

model Review {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  name             String
  rating           String          @default("0.00")
  review           String          @db.Text
  title            String
  email            String
  account          Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId        Int
  product          Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId        Int?
  customer         Customer        @relation(fields: [customerId], references: [id])
  customerId       Int
  digitalProduct   DigitalProduct? @relation(fields: [digitalProductId], references: [id], onDelete: Cascade)
  digitalProductId Int?
  shopperAccount   ShopperAccount? @relation(fields: [shopperAccountId], references: [id])
  shopperAccountId Int?

  @@index([accountId])
  @@index([productId])
  @@index([customerId])
  @@index([digitalProductId])
  @@index([shopperAccountId])
}

model DigitalProduct {
  id                   Int             @id @default(autoincrement())
  digitalProductId     String?         @unique
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  isEnabled            Boolean         @default(true)
  tags                 String?         @db.Text
  productTypeDisplay   String          @default("digital")
  productType          Int             @default(1)
  taxCode              String?
  taxCodeName          String?
  taxCodeDescription   String?         @db.Text
  lat                  Float?
  lng                  Float?
  geohash              String?
  productName          String
  description          String
  hasUnlimitedQuantity Boolean         @default(true)
  setQuantityByProduct Boolean         @default(true)
  salePricePenny       Int?
  salePriceStr         String?
  priceIntPenny        Int
  priceStr             String
  rating               String          @default("0.00")
  reviewCount          Int             @default(0)
  fiveStarCount        Int             @default(0)
  fourStarCount        Int             @default(0)
  threeStarCount       Int             @default(0)
  twoStarCount         Int             @default(0)
  oneStarCount         Int             @default(0)
  fireStorageId        String?         @unique //id to find  file in firebase storage.
  defaultImageFileName String?
  defaultImage         String?         @db.Text
  defaultImageAlt      String?         @db.Text
  images               Image[]
  relatedCategories    Category[]
  reviews              Review[]
  digitalFiles         DigitalFile[]
  orders               OrderItem[]
  customerOrder        CustomerOrder[]
  Wishlist             Wishlist[]
  wishlistCount        Int             @default(0)
  Like                 Like[]
  likesCount           Int             @default(0)
  account              Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId            Int

  @@index([accountId])
  @@index([lat])
  @@index([lng])
  @@index([isEnabled])
  @@fulltext([tags])
  @@fulltext([productName])
  @@fulltext([description])
  @@fulltext([productName, tags])
  @@fulltext([description, tags])
  @@fulltext([productName, description])
  @@fulltext([productName, description, tags])
}

model DigitalFile {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  name             String
  uploadedFile     String          @db.Text
  fireStorageId    String //id to find image file in firebase storage.
  digitalProduct   DigitalProduct? @relation(fields: [digitalProductId], references: [id], onDelete: Cascade)
  digitalProductId Int?

  @@index([digitalProductId])
}

model Product {
  id                         Int             @id @default(autoincrement())
  productId                  String?         @unique
  createdAt                  DateTime        @default(now())
  updatedAt                  DateTime        @updatedAt
  productTypeDisplay         String          @default("physical") // "physical", "digital"
  productType                Int             @default(0) // 0: physical, 1: digital
  tags                       String?         @db.Text
  isSampleProduct            Boolean         @default(false)
  isEnabled                  Boolean         @default(true)
  productName                String
  description                String?         @db.Text
  taxCode                    String?
  taxCodeName                String?
  taxCodeDescription         String?         @db.Text
  lat                        Float?
  lng                        Float?
  geohash                    String?
  salePricePenny             Int?
  salePriceStr               String?
  priceIntPenny              Int
  priceStr                   String
  defaultImageFileName       String?
  defaultImage               String?         @db.Text
  defaultImageAlt            String?         @db.Text
  images                     Image[]
  fireStorageId              String?         @unique //id to find image file in firebase storage.
  hasUnlimitedQuantity       Boolean         @default(true)
  setQuantityByProduct       Boolean         @default(true) //If false, set qty by variant and total up for qty.
  quantity                   Int?
  enableCustomNote           Boolean         @default(false)
  enableCustomerImageUploads Boolean         @default(false)
  rating                     String          @default("0.00")
  reviewCount                Int             @default(0)
  fiveStarCount              Int             @default(0)
  fourStarCount              Int             @default(0)
  threeStarCount             Int             @default(0)
  twoStarCount               Int             @default(0)
  oneStarCount               Int             @default(0)
  reviews                    Review[]
  optionGroups               OptionGroup[]
  questions                  Question[]
  relatedCategories          Category[]
  account                    Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId                  Int
  orders                     OrderItem[]
  customerOrder              CustomerOrder[]
  customerOrderId            Int?
  likes                      Like[]
  likesCount                 Int             @default(0)
  Wishlist                   Wishlist[]
  wishlistCount              Int             @default(0)

  @@index([accountId])
  @@index([lat])
  @@index([lng])
  @@index([isEnabled])
  @@fulltext([tags])
  @@fulltext([productName])
  @@fulltext([description])
  @@fulltext([productName, tags])
  @@fulltext([description, tags])
  @@fulltext([productName, description])
  @@fulltext([productName, description, tags])
}

model Image {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  isDefault        Boolean         @default(false)
  imgFileName      String?
  imagePosition    String?
  image            String?         @db.Text
  imageAltText     String?         @db.Text
  fireStorageId    String? //id to find image file in firebase storage.
  imported         Boolean         @default(false)
  product          Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId        Int?
  digitalProduct   DigitalProduct? @relation(fields: [digitalProductId], references: [id], onDelete: Cascade)
  digitalProductId Int?

  @@index([productId])
  @@index([digitalProductId])
}

model Category {
  id              Int              @id @default(autoincrement())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  categoryName    String
  account         Account          @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId       Int
  products        Product[]
  digitalProducts DigitalProduct[]

  @@unique(fields: [accountId, categoryName], name: "category_identifier")
  @@index([accountId])
}

model Question {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  question    String   @db.TinyText
  productName String
  isRequired  Boolean  @default(true)
  product     Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int?

  @@index([productId])
}

model OptionGroup {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  optionGroupName   String
  productName       String
  selectionType     Int      @default(0) // 0: select 1, 1 select many
  selectionDisplay  String   @default("select one") // select one, select many
  isRequired        Boolean  @default(false)
  isRequiredDisplay String   @default("optional") // optional, required
  product           Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId         Int?
  options           Option[]

  @@index([productId])
}

model Option {
  id              Int         @id @default(autoincrement())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  optionGroupName String
  optionName      String
  priceIntPenny   Int?        @default(0)
  priceStr        String?     @default("$0.00")
  quantity        Int?
  optionGroup     OptionGroup @relation(fields: [optionGroupId], references: [id], onDelete: Cascade)
  optionGroupId   Int

  @@index([optionGroupId])
}

model Checklist {
  id                       Int     @id @default(autoincrement())
  isEmailVerified          Boolean @default(false)
  isProductsUploaded       Boolean @default(false)
  isDeliverySet            Boolean @default(false)
  isPaymentsSet            Boolean @default(false)
  hasViewedSupportChannels Boolean @default(false)
  hasViewedShareStore      Boolean @default(false)
  hasLogo                  Boolean @default(false)
  hasBanner                Boolean @default(false)
  requireAvailability      Boolean @default(false)
  isAvailabilitySet        Boolean @default(false)
  subdomain                String? @unique
  account                  Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId                Int     @unique
}

model PremiumPlan {
  id                   Int      @id @default(autoincrement())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  stripeCustomerId     String   @unique
  stripeSubscriptionId String
  stripePlanId         String
  planName             String
  price                Int
  priceDisplay         String
  stripeFees           Int
  stripeFeesDisplay    String
  totalCharged         Int
  totalChargedDisplay  String
  payPeriod            String?
  periodStart          Int
  periodEnd            Int
  autoRenew            Boolean  @default(true)
  account              Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId            Int      @unique

  @@index([accountId])
}

model SavedPaymentMethod {
  id                  Int      @id @default(autoincrement())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  paymentMethod       String?
  cardholderName      String?
  cardExpirationStr   String?
  cardExpirationEpoch String?
  cardNumber          Int?
  account             Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId           Int

  @@index([accountId])
}

model BusinessType {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String?
  account   Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId Int?

  @@index([accountId])
}

model Social {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  platform   String
  socialLink String
  account    Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId  Int

  @@unique(fields: [socialLink, accountId], name: "social_identifier")
  @@index([accountId])
}

model Fulfillment {
  id                            Int      @id @default(autoincrement())
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
  method                        String //"delivery", "pickup"
  methodInt                     Int //0: delivery, 1: pickup
  deliveryTypeInt               Int? //0: third party 1: self-delivery
  deliveryTypeStr               String? //"outsource", "in-house"
  localDeliveryDistanceStr      String?
  localDeliveryDistanceMi       Int?
  localDeliveryDistanceKm       Int?
  pickupNote                    String?
  deliveryFeeType               String? //"flat", "distance", "percetange"
  deliveryFeePriceStr           String?
  deliveryFeePriceIntPenny      Int?
  deliveryFeeByDistanceStr      String?
  deliveryFeeByDistanceIntPenny Int?
  deliveryFeeDistanceMetric     String?  @default("mi")
  deliveryFeeByPercentStr       String?
  deliveryFeeByPercent          Float?
  account                       Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId                     Int

  @@unique(fields: [accountId, method], name: "fulfillment_identifier")
  @@index([accountId])
}

model Tips {
  id               Int      @id @default(autoincrement())
  account          Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId        Int      @unique
  tipOneStr        String
  tipOneIntPenny   Int?
  tipOnePercent    Float?
  tipTwoStr        String
  tipTwoIntPenny   Int?
  tipTwoPercent    Float?
  tipThreeStr      String
  tipThreeIntPenny Int?
  tipThreePercent  Float?
  type             String
  enabled          Boolean  @default(true)
}
