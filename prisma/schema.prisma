// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Waitlist {
  id             Int      @id @default(autoincrement())
  name           String?
  fName          String?
  lName          String?
  email          String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  subdomain      String   @unique
  earlyBird      Boolean  @default(true)
  earlyBirdCode  String?  @unique
  reservationNo  Int?     @unique
  numberReferred Int      @default(0)
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  firstName     String?
  lastName      String?
  email         String    @unique
  emailVerified Boolean   @default(false)
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  role          Role      @default(OWNER)
}

model Account {
  id                   Int             @id @default(autoincrement())
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  userId               Int
  isActive             Boolean         @default(false) // After email verification, this will be active.
  freePeriodActive     Boolean         @default(true)
  freePeriodEndDateStr String?
  // freePeriodEndDateEpoch BigInt?
  email                String          @unique
  emailVerified        Boolean         @default(false)
  name                 String?
  firstName            String?
  lastName             String?
  accessCode           String?         @unique
  businessName         String
  subdomain            String          @unique
  businessTypes        BusinessTypes[]
  logoImgStr           String?
  businessBio          String?
  socials              Socials[]
  fulfillmentMethodInt Int
  fulfillmentMethods   Fulfillment[]
  address_1            String
  address_2            String?
  city                 String
  state                String
  zip                  String
  fullAddress          String
  enableTips           Boolean         @default(false)
  tipValues            Tips[]
  user                 User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model BusinessTypes {
  id        Int      @id @default(autoincrement())
  type      String?
  Account   Account? @relation(fields: [accountId], references: [id])
  accountId Int?

  @@index([accountId])
}

model Socials {
  id        Int      @id @default(autoincrement())
  platform  String?
  url       String?
  Account   Account? @relation(fields: [accountId], references: [id])
  accountId Int?

  @@index([accountId])
}

model Fulfillment {
  id                       Int      @id @default(autoincrement())
  method                   String
  methodInt                Int
  deliveryTypeInt          Int?
  deliveryTypeStr          String?
  localDeliveryDistanceStr String?
  localDeliveryDistanceMi  Int?
  localDeliveryDistanceKm  Int?
  pickupNote               String?
  Account                  Account? @relation(fields: [accountId], references: [id])
  accountId                Int?

  @@index([accountId])
}

model Tips {
  id          Int      @id @default(autoincrement())
  tipOneStr   String?
  tipOneInt   Int?
  tipTwoStr   String?
  tipTwoInt   Int?
  tipThreeStr String?
  tipThreeInt Int?
  type        String?
  enabled     Boolean  @default(false)
  Account     Account? @relation(fields: [accountId], references: [id])
  accountId   Int?

  @@index([accountId])
}

enum Role {
  // BoxCart Admin
  SUPERADMIN
  // BoxCart Staff
  SUPERSTAFF
  // Business owners - users
  OWNER
  // User's staff
  STAFF
  // Customers - of Users
  CUSTOMER
  // Regular user
  USER
}
