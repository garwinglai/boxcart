// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Waitlist {
  id         Int      @id @default(autoincrement())
  name       String?
  fName      String?
  lName      String?
  email      String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  subdomain  String   @unique
  fullDomain String   @unique
  accessCode String   @unique
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int?     @unique

  @@index([userId])
}

model User {
  id              Int       @id @default(autoincrement())
  name            String
  firstName       String
  lastName        String
  email           String    @unique
  isEmailVerified Boolean   @default(false)
  password        String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  referredFrom    String?
  accounts        Account[]
  role            Role      @default(OWNER)
  Waitlist        Waitlist?
  waitlistId      Int?
}

model Account {
  id                              Int      @id @default(autoincrement())
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime @updatedAt
  version                         String   @default("1.0.0")
  referredFrom                    String?
  isActive                        Boolean  @default(true) // free accounts that aren't free
  hasPremiumPlan                  Boolean  @default(false) // Default false until user pays for premium plan.
  isFreePeriodActive              Boolean  @default(true)
  isBetaUser                      Boolean  @default(true) // Default is true, meantime we are only accepting beta users.
  freePeriodEndDateStr            String?
  freePeriodEndDateEpoch          String? // 1 month free
  isFirstLogin                    Boolean  @default(true)
  isChecklistComplete             Boolean  @default(false) // Default false until checklist is complete.
  isNonMandatoryChecklistComplete Boolean  @default(false) // Default false until checklist is complete.
  email                           String   @unique
  isEmailVerified                 Boolean  @default(false)
  userName                        String
  firstName                       String
  lastName                        String
  accessCode                      String?  @unique
  businessName                    String
  subdomain                       String   @unique
  fullDomain                      String   @unique

  // logoImgStr             String?
  logoImageFileName    String?
  logoImage            String?              @db.Text
  bannerImageFileName  String?
  bannerImage          String?              @db.Text
  businessBio          String?              @db.VarChar(255)
  socials              Social[]
  subscriberCount      Int                  @default(0)
  customers            Customer[]
  subscribers          Subscriber[]
  contacts             Contact[]
  fulfillmentMethodInt Int // 0: delivery, 1: pickup, 2: both
  fulfillmentMethods   Fulfillment[]
  address_1            String
  address_2            String?
  city                 String
  state                String
  zip                  String
  fullAddress          String
  lat                  Float?
  lng                  Float?
  geohash              String?
  enableTips           Boolean              @default(false)
  tips                 Tips?
  tax                  Tax?
  user                 User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               Int
  // hasPaymentMethod       Boolean              @default(false)
  requireDeposit       Boolean              @default(false)
  businessTypes        BusinessType[]
  acceptedPayments     AcceptedPayment[]
  deposit              Deposit?
  savedPaymentMethods  SavedPaymentMethod[]
  premiumPlan          PremiumPlan?
  checklist            Checklist?
  products             Product[]
  categories           Category[]
  availability         Availability?
  orders               CustomerOrder[]
  revenue              Revenue?
  payout               Payout[]
  taxId                Int?
  payoutId             Int?

  @@index([userId])
}

model Revenue {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  totalBalancePenny  Int?     @default(0)
  cardRevenuePenny   Int?     @default(0)
  cashRevenuePenny   Int?     @default(0)
  venmoRevenuePenny  Int?     @default(0)
  zelleRevenuePenny  Int?     @default(0)
  paypalRevenuePenny Int?     @default(0)
  account            Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId          Int      @unique

  @@index([accountId])
}

model Payout {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  stripeAccountId String
  stripePayoutId  String
  balance         Int
  balanceDisplay  String
  fees            Int
  feesDisplay     String
  net             Int
  netDisplay      String
  account         Account  @relation(fields: [accountId], references: [id])
  accountId       Int      @unique

  @@index([accountId])
}

model Customer {
  id              Int             @id @default(autoincrement())
  name            String
  fName           String
  lName           String
  phoneNum        String?
  email           String          @unique
  stripeId        String?
  deliveryAddress String?
  // address_1       String?
  // address_2       String?
  // city            String?
  // state           String?
  // zip             String?
  orders          CustomerOrder[]
  account         Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId       Int

  @@index([accountId])
}

model Tax {
  id               Int     @id @default(autoincrement())
  taxRate          Float?
  taxRateDisplay   String?
  isTaxRateEnabled Boolean @default(false)
  account          Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId        Int     @unique

  @@index([accountId])
}

model CustomerOrder {
  id                          Int         @id @default(autoincrement())
  createdAt                   DateTime    @default(now())
  updatedAt                   DateTime    @updatedAt
  orderId                     String      @unique
  stripeOrderId               String?
  stripeErrorType             String? //validation_error, unknown_error, card_error
  stripeErrorMessage          String?
  orderItems                  OrderItem[]
  deliveryAddress             String?
  pickupAddress               String?
  requireOrderTime            Boolean     @default(false)
  requireOrderDate            Boolean     @default(false)
  orderForDate                String? //epoch in milliseconds
  orderForDateDisplay         String?
  orderForTime                String? //epoch in milliseconds
  orderForTimeDisplay         String?
  fulfillmentType             Int // 0: delivery, 1: pickup
  fulfillmentDisplay          String //"delivery", "pickup"
  subtotalPenny               Int
  subtotalDisplay             String
  taxRate                     Float?
  taxRateDisplay              String?
  orderStatus                 String      @default("pending") // "pending", "cmpleted", "canceled"
  paymentStatus               String // if cc: "processing", "paid", "failed", "refunded", "canceled", "unpaid", "error" 
  paymentMethod               String? // "card", "venmo", "cash" .. etc.
  paymentAccount              String? // account for venmo, paypal, zelle, etc.
  paymentInstructions         String?
  pickupNote                  String?
  // stripeFeePenny      Int? 
  // stripeFeeDisplay    String?
  cardFeePenny                Int?
  cardFeeDisplay              String?
  taxAndFeesPenny             Int?
  taxAndFeesDisplay           String?
  deliveryFeePenny            Int?
  deliveryFeeDisplay          String?
  tipPenny                    Int?
  tipDisplay                  String?
  totalPenny                  Int
  totalDisplay                String
  totalAfterStripeFeesPenny   Int?
  totalAfterStripeFeesDisplay String?
  totalItemsOrdered           Int
  account                     Account     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId                   Int
  customer                    Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId                  Int

  @@index([accountId])
  @@index([customerId])
}

model OrderItem {
  id                    Int                   @id @default(autoincrement())
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  productName           String
  quantity              Int
  customNote            String?               @db.Text
  pricePenny            Int
  priceDisplay          String
  productImage          String?               @db.Text
  hasUnlimitedQuantity  Boolean               @default(true)
  setQuantityByProduct  Boolean               @default(true)
  orderOptionGroups     OrderOptionGroup[]
  orderExampleImages    OrderExampleImage[]
  orderQuestionsAnswers OrderQuestionAnswer[]
  Order                 CustomerOrder         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId               Int
  product               Product?              @relation(fields: [productId], references: [id])
  productId             Int?

  @@index([productId])
  @@index([orderId])
}

model OrderQuestionAnswer {
  id          Int        @id @default(autoincrement())
  question    String     @db.TinyText
  answer      String     @db.Text
  orderItem   OrderItem? @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  orderItemId Int?

  @@index([orderItemId])
}

model OrderExampleImage {
  id            Int        @id @default(autoincrement())
  image         String     @db.Text
  fireStorageId String     @unique
  fileName      String
  orderItem     OrderItem? @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  orderItemId   Int?

  @@index([orderItemId])
}

model OrderOptionGroup {
  id              Int           @id @default(autoincrement())
  optionGroupName String?
  optionsDisplay  String
  orderOptions    OrderOption[]
  orderItem       OrderItem?    @relation(fields: [orderItemId], references: [id], onDelete: Cascade)
  orderItemId     Int?

  @@index([orderItemId])
}

model OrderOption {
  id                 Int               @id @default(autoincrement())
  optionName         String
  optionPrice        Int
  optionPriceDisplay String
  optionQuantity     Int?
  orderOptionGroup   OrderOptionGroup? @relation(fields: [orderOptionGroupId], references: [id], onDelete: Cascade)
  orderOptionGroupId Int?

  @@index([orderOptionGroupId])
}

model Contact {
  id        Int     @id @default(autoincrement())
  fName     String
  lName     String
  email     String  @unique
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId Int

  @@index([accountId])
}

model Subscriber {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId Int

  @@index([accountId])
}

model AcceptedPayment {
  id                  Int      @id @default(autoincrement())
  isEnabled           Boolean  @default(false)
  details_submitted   Boolean?
  charged_enabled     Boolean?
  stripeAccountId     String?  @unique
  paymentMethod       String
  paymentAccount      String?
  paymentInstructions String?  @db.TinyText
  account             Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId           Int
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([paymentMethod, accountId], name: "payment_identifier")
  @@index([accountId])
}

model Deposit {
  id            Int     @id @default(autoincrement())
  feeTypeStr    String?
  feeTypeSymbol String?
  feeStr        String?
  feeIntPenny   Int?
  feeIntPercent Float?
  account       Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId     Int     @unique
}

model Availability {
  id                      Int                       @id @default(autoincrement())
  hasCustomAvailability   Boolean                   @default(false)
  datesAvailability       DatesAvailability[]
  datesRangedAvailability DatesRangedAvailability[]
  daysOfWeekAvailability  DaysOfWeekAvailability[]
  requireOrderInAdvance   Boolean                   @default(false)
  orderInAdvanceDisplay   String?                   @default("24 hours")
  orderInAdvanceValue     Int?                      @default(24)
  orderInAdvanceInSeconds Int?                      @default(86400)
  orderInAdvanceMetric    String?                   @default("hour")
  isTimeBlockEnabled      Boolean                   @default(false)
  timeBlock               String?                   @default("15 min")
  timeBlockSeconds        Int?                      @default(900)
  account                 Account                   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId               Int                       @unique
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt

  @@index([accountId])
}

model DatesAvailability {
  id                Int          @id @default(autoincrement())
  dateStrUnformat   String
  dateStr           String
  dateEpochStr      String
  startTimeStr      String
  startTimeEpochStr String
  endTimeStr        String
  endTimeEpochStr   String
  hoursDisplay      String?
  // repeatOption      String?
  // repeatOptionInt   Int? //0: no repeat 1: repeat weekly 
  isEnabled         Boolean      @default(true)
  availability      Availability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)
  availabilityId    Int
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@index([availabilityId])
}

model DatesRangedAvailability {
  id                   Int          @id @default(autoincrement())
  startDateStrUnformat String
  startDateStr         String
  startDateEpochStr    String
  endDateStrUnformat   String
  endDateStr           String
  endDateEpochStr      String
  startTimeStr         String
  endTimeStr           String
  hoursDisplay         String?
  isEnabled            Boolean      @default(true)
  availability         Availability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)
  availabilityId       Int
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt

  @@index([availabilityId])
}

model DaysOfWeekAvailability {
  id             Int          @id @default(autoincrement())
  daysDisplay    String
  days           String //string of days int "0, 1, 2, " 0 = sunday
  startTimeStr   String
  endTimeStr     String
  hoursDisplay   String?
  isEnabled      Boolean      @default(true)
  availability   Availability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)
  availabilityId Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([availabilityId])
}

model Product {
  id                         Int           @id @default(autoincrement())
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @updatedAt
  isSampleProduct            Boolean       @default(false)
  isEnabled                  Boolean       @default(true)
  productName                String
  description                String        @db.Text
  priceIntPenny              Int
  priceStr                   String
  defaultImageFileName       String?
  defaultImage               String?       @db.Text
  images                     Image[]
  fireStorageId              String?       @unique //id to find image file in firebase storage.
  hasUnlimitedQuantity       Boolean       @default(true)
  setQuantityByProduct       Boolean       @default(true) //If false, set qty by variant and total up for qty.
  quantity                   Int?
  enableCustomNote           Boolean       @default(false)
  enableCustomerImageUploads Boolean       @default(false)
  optionGroups               OptionGroup[]
  questions                  Question[]
  relatedCategories          Category[]
  account                    Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId                  Int
  orders                     OrderItem[]

  @@index([accountId])
}

model Image {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isDefault     Boolean  @default(false)
  imgFileName   String?
  image         String?  @db.Text
  fireStorageId String? //id to find image file in firebase storage.
  product       Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     Int?

  @@index([productId])
}

model Category {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  categoryName String
  account      Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId    Int
  products     Product[]

  @@unique(fields: [accountId, categoryName], name: "category_identifier")
  @@index([accountId])
}

model Question {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  question    String   @db.TinyText
  productName String
  isRequired  Boolean  @default(true)
  product     Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int?

  @@index([productId])
}

model OptionGroup {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  optionGroupName   String
  productName       String
  selectionType     Int      @default(0) // 0: select 1, 1 select many
  selectionDisplay  String   @default("select one") // select one, select many
  isRequired        Boolean  @default(false)
  isRequiredDisplay String   @default("optional") // optional, required
  product           Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId         Int?
  options           Option[]

  @@index([productId])
}

model Option {
  id              Int         @id @default(autoincrement())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  optionGroupName String
  optionName      String
  priceIntPenny   Int?        @default(0)
  priceStr        String?     @default("$0.00")
  quantity        Int?
  optionGroup     OptionGroup @relation(fields: [optionGroupId], references: [id], onDelete: Cascade)
  optionGroupId   Int

  @@index([optionGroupId])
}

model Checklist {
  id                       Int     @id @default(autoincrement())
  isEmailVerified          Boolean @default(false)
  isProductsUploaded       Boolean @default(false)
  isDeliverySet            Boolean @default(false)
  isPaymentsSet            Boolean @default(false)
  hasViewedSupportChannels Boolean @default(false)
  hasViewedShareStore      Boolean @default(false)
  hasLogo                  Boolean @default(false)
  hasBanner                Boolean @default(false)
  requireAvailability      Boolean @default(false)
  isAvailabilitySet        Boolean @default(false)
  subdomain                String? @unique
  account                  Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId                Int     @unique
}

model PremiumPlan {
  id                   Int      @id @default(autoincrement())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  stripeCustomerId     String   @unique
  stripeSubscriptionId String
  planName             String
  price                Int
  priceDisplay         String
  payPeriod            String?
  periodStart          Int
  periodEnd            Int
  autoRenew            Boolean  @default(true)
  account              Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId            Int      @unique

  @@index([accountId])
}

model SavedPaymentMethod {
  id                  Int      @id @default(autoincrement())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  paymentMethod       String?
  cardholderName      String?
  cardExpirationStr   String?
  cardExpirationEpoch String?
  cardNumber          Int?
  account             Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId           Int

  @@index([accountId])
}

model BusinessType {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String?
  account   Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId Int?

  @@index([accountId])
}

model Social {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  platform   String
  socialLink String
  account    Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId  Int

  @@unique(fields: [socialLink, accountId], name: "social_identifier")
  @@index([accountId])
}

model Fulfillment {
  id                            Int      @id @default(autoincrement())
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt
  method                        String //"delivery", "pickup"
  methodInt                     Int //0: delivery, 1: pickup
  deliveryTypeInt               Int? //0: third party 1: self-delivery
  deliveryTypeStr               String? //"outsource", "in-house"
  localDeliveryDistanceStr      String?
  localDeliveryDistanceMi       Int?
  localDeliveryDistanceKm       Int?
  pickupNote                    String?
  deliveryFeeType               String? //"flat", "distance", "percetange"
  deliveryFeePriceStr           String?
  deliveryFeePriceIntPenny      Int?
  deliveryFeeByDistanceStr      String?
  deliveryFeeByDistanceIntPenny Int?
  deliveryFeeDistanceMetric     String?  @default("mi")
  deliveryFeeByPercentStr       String?
  deliveryFeeByPercent          Float?
  account                       Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId                     Int

  @@unique(fields: [accountId, method], name: "fulfillment_identifier")
  @@index([accountId])
}

model Tips {
  id               Int      @id @default(autoincrement())
  account          Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId        Int      @unique
  tipOneStr        String
  tipOneIntPenny   Int?
  tipOnePercent    Float?
  tipTwoStr        String
  tipTwoIntPenny   Int?
  tipTwoPercent    Float?
  tipThreeStr      String
  tipThreeIntPenny Int?
  tipThreePercent  Float?
  type             String
  enabled          Boolean  @default(true)
}

enum Role {
  // BoxCart Admin
  SUPERADMIN
  // BoxCart Staff
  SUPERSTAFF
  // BoxCart Partner
  PARTNER
  // Business owners - boxcart users
  OWNER
  // User's staff
  STAFF
  // Customers - of Users
  CUSTOMER
  // Regular user
  USER
}
