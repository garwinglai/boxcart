// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Waitlist {
  id             Int      @id @default(autoincrement())
  name           String?
  fName          String?
  lName          String?
  email          String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  subdomain      String   @unique
  earlyBird      Boolean  @default(true)
  earlyBirdCode  String?  @unique
  reservationNo  Int?     @unique
  numberReferred Int      @default(0)
  isUserCreated  Boolean  @default(false)
  // user           User?
}

model User {
  id              Int       @id @default(autoincrement())
  name            String?
  firstName       String?
  lastName        String?
  email           String    @unique
  isEmailVerified Boolean   @default(false)
  password        String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  accounts        Account[]
  role            Role      @default(OWNER)
  // waitlist        Waitlist? @relation(fields: [waitlistId], references: [id])
  // waitlistId      Int?      @unique
}

model Account {
  id                     Int                  @id @default(autoincrement())
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  isFreePeriodActive     Boolean              @default(true)
  freePeriodEndDateStr   String?
  freePeriodEndDateEpoch String?
  isFirstLogin           Boolean              @default(true)
  email                  String               @unique
  isEmailVerified        Boolean              @default(false)
  userName               String?
  firstName              String?
  lastName               String?
  // accessCode             String?        @unique
  businessName           String
  subdomain              String               @unique
  businessTypes          BusinessType[]
  logoImgStr             String?
  businessBio            String?              @db.VarChar(255)
  socials                Social[]
  subscriberCount        Int                  @default(0)
  subscribers            Subscriber[]
  contacts               Contact[]
  fulfillmentMethodInt   Int // 0: delivery, 1: pickup, 2: both
  fulfillmentMethods     Fulfillment[]
  address_1              String
  address_2              String?
  city                   String
  state                  String
  zip                    String
  fullAddress            String
  enableTips             Boolean              @default(false)
  tips                   Tips?
  user                   User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 Int
  isTimeBlockEnabled     Boolean              @default(false)
  timeBlock              String?              @default("15 min")
  timeBlockSeconds       Int?                 @default(900)
  // new updates to check
  isActive               Boolean              @default(false) //if false, show store coming soon in url. Mark true when checklist complete.
  isBetaUser             Boolean              @default(true) // Default is true, meantime we are only accepting beta users.
  isBetaPromoActive      Boolean              @default(true) // Default is true, meantime we are only accepting beta users.
  isChecklistComplete    Boolean              @default(false) // Default false until checklist is complete.
  hasCustomAvailability  Boolean              @default(false) // Default false until user sets own availabilitly.
  hasPremiumPlan         Boolean              @default(false) // Default false until user pays for premium plan.
  hasPaymentMethod       Boolean              @default(false)
  requireDeposit         Boolean              @default(false)
  acceptedPayments       AcceptedPayment[]
  deposit                Deposit?
  savedPaymentMethods    SavedPaymentMethod[]
  premiumPlan            PremiumPlan[]
  checklist              Checklist?
  products               Product[]
  categories             Category[]
  availability           Availability?

  @@index([userId])
}

model Contact {
  id        Int     @id @default(autoincrement())
  fName     String
  lName     String
  email     String  @unique
  Account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId Int

  @@index([accountId])
}

model Subscriber {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  Account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId Int

  @@index([accountId])
}

// TODO figure out schema for stripe
model AcceptedPayment {
  id                  Int      @id @default(autoincrement())
  paymentMethod       String
  paymentAccount      String?
  paymentInstructions String?
  account             Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId           Int
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([paymentMethod, accountId], name: "payment_identifier")
  @@index([accountId])
}

model Deposit {
  id              Int     @id @default(autoincrement())
  feeTypeStr      String?
  feeTypeSymbol   String?
  feeStr          String?
  feeIntPenny     Int?
  feeIntHundredth Int?
  account         Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId       Int     @unique
}

model Availability {
  id                      Int                       @id @default(autoincrement())
  datesAvailability       DatesAvailability[]
  datesRangedAvailability DatesRangedAvailability[]
  daysOfWeekAvailability  DaysOfWeekAvailability[]
  account                 Account                   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId               Int                       @unique
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt

  @@index([accountId])
}

model DatesAvailability {
  id                Int          @id @default(autoincrement())
  dateStrUnformat   String?
  dateStr           String?
  dateEpochStr      String?
  startTimeStr      String?
  startTimeEpochStr String?
  endTimeStr        String?
  endTimeEpochStr   String?
  isEnabled         Boolean      @default(true)
  availability      Availability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)
  availabilityId    Int
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@index([availabilityId])
}

model DatesRangedAvailability {
  id                   Int          @id @default(autoincrement())
  startDateStrUnformat String?
  startDateStr         String?
  startDateEpochStr    String?
  endDateStrUnformat   String?
  endDateStr           String?
  endDateEpochStr      String?
  startTimeStr         String?
  endTimeStr           String?
  isEnabled            Boolean      @default(true)
  availability         Availability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)
  availabilityId       Int
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt

  @@index([availabilityId])
}

model DaysOfWeekAvailability {
  id              Int          @id @default(autoincrement())
  dayStr          String?
  dayInt          Int?
  startTimeStr    String?
  endTimeStr      String?
  repeatOption    String?
  repeatOptionInt Int? //0: no repeat 1: repeat weekly 2: repeat daily 3: repeat weekdays
  isEnabled       Boolean      @default(true)
  availability    Availability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)
  availabilityId  Int
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@index([availabilityId])
}

model Product {
  id                   Int           @id @default(autoincrement())
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  isSampleProduct      Boolean       @default(false)
  isEnabled            Boolean       @default(true)
  productName          String?
  description          String?
  priceIntPenny        Int?
  priceStr             String?
  defaultImgStr        String?
  images               Image[]
  hasUnlimitedQuantity Boolean       @default(true)
  setQuantityByProduct Boolean       @default(true) //If false, set qty by variant and total up for qty.
  quantity             Int?
  optionGroups         OptionGroup[]
  questions            Question[]
  relatedCategories    Category[]
  account              Account       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId            Int

  @@index([accountId])
}

model Image {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDefault   Boolean  @default(false)
  imgStr      String?
  imgFileName String?
  productName String?
  product     Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int?

  @@index([productId])
}

// TODO: cannot be unique categoryName
model Category {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  categoryName String
  account      Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId    Int
  products     Product[]

  @@unique(fields: [accountId, categoryName], name: "category_identifier")
  @@index([accountId])
}

model Question {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  question    String?
  productName String?
  isRequired  Boolean  @default(true)
  product     Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int?

  @@index([productId])
}

model OptionGroup {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  optionGroupName String?
  productName     String?
  product         Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId       Int?
  options         Option[]

  @@index([productId])
}

model Option {
  id              Int         @id @default(autoincrement())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  optionGroupName String?
  optionName      String?
  priceStr        String?
  priceIntPenny   Int?
  quantityStr     String?
  quantityInt     Int?
  optionGroup     OptionGroup @relation(fields: [optionGroupId], references: [id], onDelete: Cascade)
  optionGroupId   Int

  @@index([optionGroupId])
}

model Checklist {
  id                       Int     @id @default(autoincrement())
  isEmailVerified          Boolean @default(false)
  isProductsUploaded       Boolean @default(false)
  isDeliverySet            Boolean @default(false)
  isPaymentsSet            Boolean @default(false)
  hasViewedSupportChannels Boolean @default(false)
  hasViewedShareStore      Boolean @default(false)
  subdomain                String? @unique
  account                  Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId                Int     @unique
}

model PremiumPlan {
  id                    Int      @id @default(autoincrement())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  planName              String?
  planInt               Int? // 0 base, 1 mid, 2high
  costStr               String?
  costIntPenny          Int?
  payPeriod             String?
  nextPaymentDateStr    String?
  nextPaymentDateEpoch  String?
  previousBillDateStr   String?
  previousBillDateEpoch String?
  autoRenew             Boolean  @default(true)
  totalPaidStr          String?
  totalPaidInt          Int?
  userName              String?
  businessName          String?
  email                 String?
  account               Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId             Int

  @@index([accountId])
}

model SavedPaymentMethod {
  id                  Int      @id @default(autoincrement())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  paymentMethod       String?
  cardholderName      String?
  cardExpirationStr   String?
  cardExpirationEpoch String?
  cardNumber          Int?
  userName            String?
  businessName        String?
  email               String?
  account             Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId           Int?

  @@index([accountId])
}

model BusinessType {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String?
  account   Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId Int?

  @@index([accountId])
}

model Social {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  platform   String
  socialLink String
  account    Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId  Int

  @@unique(fields: [socialLink, accountId], name: "social_identifier")
  @@index([accountId])
}

model Fulfillment {
  id                             Int      @id @default(autoincrement())
  createdAt                      DateTime @default(now())
  updatedAt                      DateTime @updatedAt
  method                         String
  methodInt                      Int
  deliveryTypeInt                Int?
  deliveryTypeStr                String?
  localDeliveryDistanceStr       String?
  localDeliveryDistanceMi        Int?
  localDeliveryDistanceKm        Int?
  pickupNote                     String?
  deliveryFeeType                String?
  deliveryFeePriceStr            String?
  deliveryFeePriceIntPenny       Int?
  deliveryFeeByDistanceStr       String?
  deliveryFeeByDistanceIntPenny  Int?
  deliveryFeeDistanceMetric      String?
  deliveryFeeByPercentStr        String?
  deliveryFeeByPercentIntHundred Int?
  address_1                      String?
  address_2                      String?
  city                           String?
  state                          String?
  zip                            String?
  fullAddress                    String?
  account                        Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId                      Int

  @@unique(fields: [accountId, method], name: "fulfillment_identifier")
  @@index([accountId])
}

model Tips {
  id                   Int      @id @default(autoincrement())
  account              Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId            Int?     @unique
  tipOneStr            String?
  tipOneIntPenny       Int?
  tipOneIntHundredth   Int?
  tipTwoStr            String?
  tipTwoIntPenny       Int?
  tipTwoIntHundredth   Int?
  tipThreeStr          String?
  tipThreeIntPenny     Int?
  tipThreeIntHundredth Int?
  type                 String?
  enabled              Boolean  @default(true)
}

enum Role {
  // BoxCart Admin
  SUPERADMIN
  // BoxCart Staff
  SUPERSTAFF
  // Business owners - users
  OWNER
  // User's staff
  STAFF
  // Customers - of Users
  CUSTOMER
  // Regular user
  USER
}
